substitutions:
  device: p1dsmrreader
  name: P1DSMRReader
  location: Meterkast
  reboot_timeout: 1h
  update_interval: 10min

esphome:
  name: ${device}
  name_add_mac_suffix: True
  platform: ESP32
  board: esp32dev
  platformio_options:
    upload_speed: 921600
  includes:
    - uartp1reader.h
  libraries:
    - "Dsmr"
  on_boot:
    - delay: 1000ms
    - switch.turn_on: p1rts

  on_shutdown:
    - switch.turn_off: p1rts
    - delay: 1000ms

<<: !include common/common.yaml
<<: !include common/logger.yaml

# Enable to have a web server to display info
<<: !include common/web_server.yaml

status_led:
  pin:
    number: 27
    inverted: True

switch:
  - !include common/switch/restart.yaml
  - platform: gpio
    pin: 4
    id: p1rts
    internal: true

binary_sensor:
  - !include common/binary_sensor/status.yaml

uart:
  baud_rate: 115200
  rx_pin: 16
  rx_buffer_size: 512
  data_bits: 8
  parity: NONE
  stop_bits: 1
  id: p1uart

text_sensor:
  - platform: template
    id: "p1version"
    name: "DSMR Version"
    #lambda: "return {};"

  - platform: template
    id: "p1timestamp"
    name: "Electricity Timestamp"
    #lambda: "return {};"

  - platform: template
    id: "p1gastimestamp"
    name: "Gas Timestamp"

sensor:
  - !include common/sensor/wifi-signal.yaml
  - !include common/sensor/uptime.yaml

  - platform: pulse_counter
    name: "Water Consumption Per Minute"
    pin: 
      number: GPIO17
      mode: INPUT
    internal_filter: 13us
    accuracy_decimals: 0
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    update_interval: 60s
    unit_of_measurement: "dm³"
    id: water_per_minute
    filters:
      - throttle: 1.5s

    total:
      name: "Total Water Consumption"
      unit_of_measurement: "dm³"
      accuracy_decimals: 0
      id: water_total

  - platform: template
    id: "p1electricitytariff"
    name: "Electricity Tariff"
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 60s

  - platform: template
    id: "p1electricityconsumedlowtariff"
    name: "Electricity Consumed Low Tariff"
    unit_of_measurement: Wh
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1electricityconsumedhightariff"
    name: "Electricity Consumed High Tariff"
    unit_of_measurement: Wh
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1electricityproducedlowtariff"
    name: "Electricity Produced Low Tariff"
    unit_of_measurement: Wh
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1electricityproducedhightariff"
    name: "Electricity Produced High Tariff"
    unit_of_measurement: Wh
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1actualpowerconsumed"
    name: "Actual Power Consumed"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1actualpowerproduced"
    name: "Actual Power Produced"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1gasconsumed"
    name: "Gas Consumed"
    unit_of_measurement: "dm³"
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 30s

  - platform: template
    id: "p1powerconsumedl1"
    name: "Actual Power Consumed L1"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1powerconsumedl2"
    name: "Actual Power Consumed L2"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1powerconsumedl3"
    name: "Actual Power Consumed L3"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1powerproducedl1"
    name: "Actual Power Produced L1"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1powerproducedl2"
    name: "Actual Power Produced L2"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1powerproducedl3"
    name: "Actual Power Produced L3"
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1voltagel1"
    name: "Actual Voltage L1"
    accuracy_decimals: 1
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1voltagel2"
    name: "Actual Voltage L2"
    accuracy_decimals: 1
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1voltagel3"
    name: "Actual Voltage L3"
    accuracy_decimals: 1
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1currentl1"
    name: "Actual Current L1"
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1currentl2"
    name: "Actual Current L2"
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

  - platform: template
    id: "p1currentl3"
    name: "Actual Current L3"
    accuracy_decimals: 0
    filters:
      - or:
        - delta: 1.0
        - throttle: 10s

custom_component:
  id: dsmr
  lambda: |-
    auto p1sensor = new UARTP1ReaderComponent(
      id(p1uart), id(p1version), id(p1timestamp), id(p1electricitytariff), 
      id(p1electricityconsumedlowtariff), id(p1electricityconsumedhightariff),
      id(p1electricityproducedlowtariff), id(p1electricityproducedhightariff),
      id(p1actualpowerconsumed), id(p1actualpowerproduced), id(p1gastimestamp),
      id(p1gasconsumed), id(p1powerconsumedl1), id(p1powerconsumedl2), id(p1powerconsumedl3),
      id(p1powerproducedl1), id(p1powerproducedl2), id(p1powerproducedl3),
      id(p1voltagel1), id(p1voltagel2), id(p1voltagel3), id(p1currentl1), id(p1currentl2), id(p1currentl3)
    );
    App.register_component(p1sensor);
    return {p1sensor};